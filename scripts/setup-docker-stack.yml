type: update
id: setup-docker-stack
name: Docker Stack
baseUrl: https://raw.githubusercontent.com/sourcecodecom/docker-swarm-cluster/main/scripts

globals:
  REPLICATION_USER: ${settings.replication_user}
  REPLICATION_PASSWORD: ${settings.replication_password}
  MARIADB_ROOT_PASSWORD: ${settings.mariadb_root_password}
  MARIADB_MASTER_HOST: ${settings.mariadb_master_host}

onAfterClone:
  - install: ${baseUrl}/setup-docker-stack.yml
    envName: ${event.response.env.envName}
    settings:
      clone: true
      replication_user: ${globals.REPLICATION_USER}
      replication_password: ${globals.REPLICATION_PASSWORD}
      mariadb_root_password: ${globals.MARIADB_ROOT_PASSWORD}
      mariadb_master_host: ${globals.MARIADB_MASTER_HOST}
  - cloneData:
      srcenv: ${event.params.srcenv}
      targetenv: ${event.params.targetenv}
  
onInstall:
  # - if (${settings.clone:false}):
  #   - change-docker-config:
  #       docker_master_hostname: ${nodes.vds[0].id}
  #       docker_slave_hostname: ${nodes.vds[1].id}
  - pull-bitnami-mariadb
  - setup-docker-stack:
      docker_master_hostname: ${nodes.vds[0].id}
      docker_slave_hostname: ${nodes.vds[1].id}

actions:
  change-docker-config:
    - cmd [${nodes.vps.master.id}]:
      - sed -i "s/docker_master_hostname/node${this.docker_master_hostname}-${env.domain}/" /opt/services/mysql-repl/docker-compose.yml
      - sed -i "s/docker_slave_hostname/node${this.docker_slave_hostname}-${env.domain}/" /opt/services/mysql-repl/docker-compose.yml
      - docker stack deploy -c /opt/services/mysql-repl/docker-compose.yml mysql

  cloneData:
    - script: |
        var envInfo, resp, groups, vdsnodes = [], onAfterReturn = { setGlobals: {} }, glbs = onAfterReturn.setGlobals;
        envInfo = jelastic.env.control.GetEnvInfo('${this.srcenv}', session);

        for (var node = 0, nodes = envInfo.nodes; node < nodes.length; node++) {
            if (nodes[node].nodeGroup === 'vds')
              vdsnodes.push(nodes[node].id);
        }

        glbs["old_vdsnode0_id"] = vdsnodes[0];
        glbs["old_vdsnode1_id"] = vdsnodes[1];

        return { result: 0, onAfterReturn: onAfterReturn, arrayresult: vdsnodes }

    - setGlobals:
        old_vdsnode0_id: ${globals.old_vdsnode0_id}
        old_vdsnode1_id: ${globals.old_vdsnode1_id}

    - cmd [${globals.old_vdsnode0_id}]: mkdir -p /opt/test
    
  pull-bitnami-mariadb:
    - cmd [${nodes.vps.master.id}]: docker pull bitnami/mariadb:10.1.29-r2

  setup-docker-stack:
    - cmd [${nodes.vps.master.id}]: |-
        mkdir -p /opt/services/mysql-repl
        wget ${baseUrl}/mysql-repl/docker-compose.yml -O /opt/services/mysql-repl/docker-compose.yml &>> /var/log/run.log
        sed -i "s/replication_user/${globals.REPLICATION_USER}/" /opt/services/mysql-repl/docker-compose.yml
        sed -i "s/replication_password/${globals.REPLICATION_PASSWORD}/" /opt/services/mysql-repl/docker-compose.yml
        sed -i "s/mariadb_root_password/${globals.MARIADB_ROOT_PASSWORD}/" /opt/services/mysql-repl/docker-compose.yml
        sed -i "s/mariadb_master_host/${globals.MARIADB_MASTER_HOST}/" /opt/services/mysql-repl/docker-compose.yml
        sed -i "s/docker_master_hostname/node${this.docker_master_hostname}-${env.domain}/" /opt/services/mysql-repl/docker-compose.yml
        sed -i "s/docker_slave_hostname/node${this.docker_slave_hostname}-${env.domain}/" /opt/services/mysql-repl/docker-compose.yml
    
    - cmd [${nodes.vps.master.id}]: docker stack deploy -c /opt/services/mysql-repl/docker-compose.yml mysql