type: update
id: proxysql-setup
name: ProxySQL
baseUrl: https://raw.githubusercontent.com/sourcecodecom/docker-swarm-cluster/main/scripts

globals:
  DB_ROOT_PASSWORD: ${settings.db_root_password}
  REPLICATION_USER: ${settings.replication_user}
  REPLICATION_PASSWORD: ${settings.replication_password}
  ORCHESTRATOR_PASSWORD: orchest12345
  PATH: ${settings.path}
  MAX_REPL_LAG: 20

onAfterScaleOut[vds]:
  forEach(event.response.nodes):
    - addSlave:
        id: "${@i.id}"

onBeforeScaleIn[vds]:
  forEach(event.response.nodes)
    - removeSlave:
        id: "${@i.id}"

onAfterScaleIn[vds]:
  forEach(event.response.nodes):
    cmd[proxy]: MYSQL_PWD=${globals.ORCHESTRATOR_PASSWORD} mysql -h 127.0.0.1 -P3360 -uadmin -e "DELETE FROM orchestrator.database_instance where hostname='node${@i.id}-${env.domain}';"

onAfterClone:
  install: ${globals.PATH}/scripts/proxysql-setup.yml
  envName: ${event.response.env.envName}
  nodeGroup: vds
  settings:
    db_root_password: ${globals.MARIADB_ROOT_PASSWORD}
    replication_user: ${globals.REPLICATION_USER}
    replication_password: ${globals.REPLICATION_PASSWORD}
    path: ${baseUrl}

onAfterMigrate:
  install: ${globals.PATH}/scripts/proxysql-setup.yml
  envName: ${event.response.env.envName}
  nodeGroup: vds
  settings:
    db_root_password: ${globals.MARIADB_ROOT_PASSWORD}
    replication_user: ${globals.REPLICATION_USER}
    replication_password: ${globals.REPLICATION_PASSWORD}
    path: ${baseUrl}

onInstall:
 - resetProxyNodes
 - setupOrchestrator
 - setupProxySQL
 - addMaster:
    id: "${nodes.vds[0].id}"
 - addSlave:
    id: "${nodes.vds[1].id}"

actions:
  addMaster:
    - cmd [proxy]: |-
        MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin -e "INSERT INTO mysql_servers (hostgroup_id, hostname, port) VALUES (10, 'node${this.id}', 3306);"
        MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin  -e "LOAD MYSQL SERVERS TO RUNTIME; SAVE MYSQL SERVERS TO DISK;"
      user: root
    - cmd [proxy]: |-
        MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin  -e "INSERT INTO mysql_servers (hostgroup_id, hostname, port, max_replication_lag) VALUES (11, 'node${this.id}', 3306, '${globals.MAX_REPL_LAG}');"
        MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin  -e "LOAD MYSQL SERVERS TO RUNTIME; SAVE MYSQL SERVERS TO DISK;"
      user: root

  addSlave:
    cmd [proxy]: |-
      MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin  -e "INSERT INTO mysql_servers (hostgroup_id, hostname, port, max_replication_lag) VALUES (11, 'node${this.id}', 3307, '${globals.MAX_REPL_LAG}');"
      MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin  -e "LOAD MYSQL SERVERS TO RUNTIME;SAVE MYSQL SERVERS TO DISK;"

  removeSlave:
    cmd [proxy]: |-
      MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin  -e "DELETE FROM mysql_servers WHERE hostname = 'node${this.id}';"
      MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin  -e "LOAD MYSQL SERVERS TO RUNTIME; SAVE MYSQL SERVERS TO DISK;"
      MYSQL_PWD=${globals.ORCH_PASS} mysql -h 127.0.0.1 -P3360 -uadmin  -e "DELETE FROM orchestrator.database_instance where hostname='node${this.id}-${env.domain}';"

  resetProxyNodes:
    cmd [proxy]: |-
      MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin -e "delete from mysql_replication_hostgroups; delete from mysql_users; delete from scheduler; delete from mysql_servers;"
      MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin -e "SAVE MYSQL VARIABLES TO DISK;"
      MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin -e "SAVE MYSQL SERVERS TO DISK;"
      MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin -e "SAVE MYSQL USERS TO DISK;"
      mysql -h 127.0.0.1 -P3360 -uroot -e "DROP DATABASE IF EXISTS orchestrator;"
      sudo service proxysql restart;

  setupProxySQL:
    - log: ProxySQL Configuration
    - cmd [proxy]: |-
        MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin -e "INSERT INTO mysql_replication_hostgroups VALUES (10,11,'read_only','Group setup');"
        MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin -e "INSERT INTO mysql_users (username, password, active, default_hostgroup, max_connections) VALUES ('root', '${globals.DB_ROOT_PASSWORD}', 1, 10, 1000);"
        MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin -e "INSERT INTO mysql_query_rules (active, match_pattern, destination_hostgroup, apply) VALUES (1, '^SELECT.*', 11, 1);"
        MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin -e "INSERT INTO mysql_query_rules (active, match_pattern, destination_hostgroup, apply) VALUES (1, '^SELECT.*FOR UPDATE', 10, 1);"
        MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin -e "UPDATE global_variables SET variable_value='${globals.REPLICATION_USER}' WHERE variable_name='mysql-monitor_username';"
        MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin -e "UPDATE global_variables SET variable_value='${globals.REPLICATION_PASSWORD}' WHERE variable_name='mysql-monitor_password';"
        MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin -e "UPDATE global_variables SET variable_value='10.1.29' WHERE variable_name='mysql-server_version';"
        MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin -e "LOAD MYSQL VARIABLES TO RUNTIME; SAVE MYSQL VARIABLES TO DISK;"
        MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin -e "LOAD MYSQL SERVERS TO RUNTIME; SAVE MYSQL SERVERS TO DISK;"
        MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin -e "LOAD MYSQL USERS TO RUNTIME; SAVE MYSQL USERS TO DISK;"
        MYSQL_PWD=admin mysql -h 127.0.0.1 -P6032 -uadmin -e "LOAD MYSQL QUERY RULES TO RUNTIME; SAVE MYSQL QUERY RULES TO DISK;"

  setupOrchestrator:
    - log: Orchestrator Configuration
    - cmd [proxy]: |-
        mysql -h 127.0.0.1 -P3360 -uroot -e "DROP DATABASE IF EXISTS orchestrator;"
        mysql -h 127.0.0.1 -P3360 -uroot -e "CREATE DATABASE IF NOT EXISTS orchestrator;"
        mysql -h 127.0.0.1 -P3360 -uroot -e "GRANT ALL PRIVILEGES ON orchestrator.* TO 'admin'@'127.0.0.1' IDENTIFIED BY '${globals.ORCHESTRATOR_PASSWORD}';"
        wget ${globals.PATH}/configs/orchestrator.conf.json -O /etc/orchestrator.conf.json &>> /var/log/run.log
        sudo sed -i -e 's|orc_client_user|root|g' /etc/orchestrator.conf.json
        sudo sed -i -e 's|orc_client_password|${globals.DB_ROOT_PASSWORD}|g' /etc/orchestrator.conf.json
        sudo sed -i -e 's|orc_server_user|admin|g' /etc/orchestrator.conf.json
        sudo sed -i -e 's|orc_server_password|${globals.ORCHESTRATOR_PASSWORD}|g' /etc/orchestrator.conf.json
        sudo sed -i -e 's|HTTP_Auth_User|admin|g' /etc/orchestrator.conf.json
        sudo sed -i -e 's|HTTP_Auth_Password|${globals.ORCHESTRATOR_PASSWORD}|g' /etc/orchestrator.conf.json
        sudo systemctl restart orchestrator
      user: root

